// HEAP FILE PUBLIC INTERFACE


struct HeaderPage
{
    char	fileName[MAX_NAME];  // name of file
    PageId	firstPage;	// pageNo of first data page in file
    PageId	lastPage;	// pageNo of last data page in file
    int		pageCnt;	// number of pages
    int		recCnt;		// record count
};

class Scan;
// class definition of heapFile
class HeapFile 
{
friend class Scan;
public:

	typedef enum{ TEMP, ORDINARY } Filetype;

    // initialize
    HeapFile(char* name,Status& returnStatus); 

    ~HeapFile();                        // destructor

    // return number of records in file
    int getRecCnt();
    
    // insert record into file
    Status insertRecord(char* recPtr, int recLen, RID& outRid); 
    
    // delete record from file
    Status deleteRecord(const RID& rid); 

    // updates the specified record in the heapfile.
    Status updateRecord(const RID& rid, char* recPtr, int reclen);

    // read record from file, returning pointer and length
    Status getRecord(const RID& rid, char* const recPtr, int& recLen); 

    // initiate a sequential scan
    Scan* openScan(Status& status);

    Status deleteFile();

};

// HEAPFILE SCAN INTERFACE

const int INVALID_SLOT =  -1;

//***********************************************************
// A Scan object is created ONLY through the function openScan
// of a HeapFile. It supports the getNext interface which will 
// simply retrieve the next record in the heapfile.

class Scan
{
public:

    // Constructor 
    Scan(HeapFile* hf, Status& status);

    // Destructor
    ~Scan();

    // retrieve the next record in a sequential scan
    // Also returns the RID of the retrieved record.

    Status getNext(RID& rid, char* recPtr, int& recLen );

};
